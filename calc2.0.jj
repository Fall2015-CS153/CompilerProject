options {
    OUTPUT_DIRECTORY="src";
}

PARSER_BEGIN(ExprParser)
import java.io.*;

public class ExprParser
{
    public static void main(String [] args) throws Exception
    {
        java.io.FileReader sr= new java.io.FileReader(args[0]);
        ExprParser parser = new ExprParser(sr);// Mark set

	System.out.println("Parsing has commenced");
        try {
            parser.Program();
        }
        catch (ParseException ex) {
            ex.printStackTrace();
        }
    }
}
PARSER_END(ExprParser)

SKIP : {
   <IGNORE : [" " , "\n"]> |
   <SINGLELINECOMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| < NEWLINE: ["\n", "\r"] >
}
SKIP :
{
  "/*" : WithinComment

}
<WithinComment> SKIP :
{
  "*/" : DEFAULT

}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

<SPECIALSYMBOL: "~"  | "@" | "%" | "^" |
 "?"  | "." | "\'"  | "<<" | ">>" | "|=" | "%="|
"&=" | "^="   | "<<=" | ">>=" |"\""   >
{ debugStream.println("SPECIAL SYMBOL : " + matchedToken.image); }
|
<SSAnd: "&">
{ debugStream.println("SS And : " + matchedToken.image); }
|
<SSOr: "|">
{ debugStream.println("SS Or : " + matchedToken.image); }
|
<SSNot: "!">
{ debugStream.println("SS Not : " + matchedToken.image); }
|
<SSL: "<">
{ debugStream.println("SS Less than : " + matchedToken.image); }
|
<SSLE: "<=">
{ debugStream.println("SS Less than equals : " + matchedToken.image); }
|
<SSG: ">">
{ debugStream.println("SS Greater than : " + matchedToken.image); }
|
<SSGE: ">=">
{ debugStream.println("SS Greater than equals : " + matchedToken.image); }
|
<SSNE: "!=">
{ debugStream.println("SS Not equal to : " + matchedToken.image); }
|
<SSPlus: "+">
{ debugStream.println("SS Plus : " + matchedToken.image); }
|
<SSMinus: "-">
{ debugStream.println("SS Minus : " + matchedToken.image); }
|
<SSStar: "*">
{ debugStream.println("SS Star: " + matchedToken.image); }
|
<SSDivide: "/">
{ debugStream.println("SS Divide : " + matchedToken.image); }
|
<SSplusplus: "++">
{ debugStream.println("SS Plus_plus : " + matchedToken.image); }
|
<SSminusminus: "--">
{ debugStream.println("SS Minus_minus : " + matchedToken.image); }
|
<SSSemiColon: ";">
{ debugStream.println("SS SemiColon : " + matchedToken.image); }
|
<SSPlusEquals: "+=">
{ debugStream.println("SS Plus_equals : " + matchedToken.image); }
|
<SSMinusEquals: "-=">
{ debugStream.println("SS Minus_equals : " + matchedToken.image); }
|
<SSMultEquals: "*=">
{ debugStream.println("SS Mult_equals : " + matchedToken.image); }
|
<SSDivideEquals: "/=">
{ debugStream.println("SS Divide_equals : " + matchedToken.image); }
|
<SSEquals: "=">
{ debugStream.println("SS Equals : " + matchedToken.image); }
|

<SSOpenParen : "(">
{ debugStream.println("SS Open Parenthesis : " + matchedToken.image); }
|
<SSCloseParen : ")">
{ debugStream.println("SS Close Parenthesis  : " + matchedToken.image); }
|
<SSOpenBraces : "{">
{ debugStream.println("SS Open Braces: " + matchedToken.image); }
|
<SSCloseBraces : "}">
{ debugStream.println("SS Close Braces  : " + matchedToken.image); }
|
<SSOpenBracket : "[">
{ debugStream.println("SS Open Bracket: " + matchedToken.image); }
|
<SSCloseBracket : "]">
{ debugStream.println("SS Close Bracket  : " + matchedToken.image); }
|
<ComparisonEquals : "==">
{ debugStream.println("ComparisonEquals : " + matchedToken.image); }
|
<SSComma : ",">
{ debugStream.println("Comma : " + matchedToken.image); }
|
<SSColon : ":">
{ debugStream.println("Colon : " + matchedToken.image); }
}

TOKEN : {
 <RESERVEDWORDPROCEDURE :"Procedure ::">
{ debugStream.println("RESERVEDWORD Prodcedure token:" + matchedToken.image  ); }
| <RESERVEDWORDIF :"if">
{ debugStream.println("RESERVEDWORD IF token:" + matchedToken.image  ); }
 |<RESERVEDWORDBREAK :"break">
{ debugStream.println("RESERVEDWORD BREAK token:" + matchedToken.image  ); }
 |<RESERVEDWORDELSE :"else">
{ debugStream.println("RESERVEDWORD ELSE token:" + matchedToken.image  ); }
 |<RESERVEDWORDELSEIF :"elseif">
{ debugStream.println("RESERVEDWORD ELSEIF token:" + matchedToken.image  ); }
 |<RESERVEDWORDRETURN :"return">
{ debugStream.println("RESERVEDWORD RETURN token:" + matchedToken.image  ); }
 |<RESERVEDWORDCASE :"case">
{ debugStream.println("RESERVEDWORD CASE token:" + matchedToken.image  ); }
|<RESERVEDWORDSWITCH :"switch">
{ debugStream.println("RESERVEDWORD SWITCH token:" + matchedToken.image  ); }
|<RESERVEDWORDWHILE :"while">
{ debugStream.println("RESERVEDWORD WHILE token:" + matchedToken.image  ); }
 |<RESERVEDWORDFOR :"for">
{ debugStream.println("RESERVEDWORD FOR token:" + matchedToken.image  ); }

 |<RESERVEDWORDTRUE :"true">
{ debugStream.println("RESERVEDWORD TRUE token:" + matchedToken.image  ); }
 |<RESERVEDWORDFALSE :"false">
{ debugStream.println("RESERVEDWORD FALSE token:" + matchedToken.image  ); }
|<RESERVEDWORDINT :"int">
{ debugStream.println("RESERVEDWORD INTEGER token:" + matchedToken.image  ); }
 |<RESERVEDWORDFLOAT :"float">
{ debugStream.println("RESERVEDWORD FLOAT token:" + matchedToken.image  ); }
|<RESERVEDWORDBOOLEAN :"boolean">
{ debugStream.println("RESERVEDWORD BOOLEAN token:" + matchedToken.image  ); }
|<RESERVEDWORDDOUBLE :"double">
{ debugStream.println("RESERVEDWORD DOUBLE token:" + matchedToken.image  ); }
|<RESERVEDWORDSTRING :"string">
{ debugStream.println("RESERVEDWORD STRING token:" + matchedToken.image  ); }

| <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> )*>
{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
|
<STRING:(<SINGLEQUOTE>|<DOUBLEQUOTE>)(<LETTER>|<DIGIT>|(<IGNORE>)*|<SPECIALSYMBOL> |<IGNORE> (<SINGLEQUOTE>|<DOUBLEQUOTE>))*  >
{ debugStream.println("STRING token:" + matchedToken.image  ); }
|<INTEGER: <DECIMALINTEGER>|<OCTALINTEGER>|<HEXINTEGER>>
{debugStream.println("INTEGER token: " + matchedToken.image);}
 | <DECIMALINTEGER : <NONZERO> (<DIGIT> )*>
{ debugStream.println("DECIMAL INTEGER token: " + matchedToken.image); }
 | <OCTALINTEGER : <ZERO>(<OCTALS> )*>
{ debugStream.println("OCTAL INTEGER token: " + matchedToken.image); }
 | <HEXINTEGER : "0"("x"|"X")(<DIGIT>|<HEXLETTERS>)(<DIGIT>|<HEXLETTERS> )*>
{ debugStream.println("HEXADECIMAL INTEGER token: " + matchedToken.image); }
| <REALNUMBER : (<DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
{ debugStream.println("REALNUMBER: " + matchedToken.image); }
| <REAL_NUMBER : ("."(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
{ debugStream.println("REALNUMBER: " + matchedToken.image); }

 | <#SINGLEQUOTE:["\'"]>
 | <#DOUBLEQUOTE:["\""]>
 | <#HEXLETTERS:["A"-"F","a"-"f"]>
 | <#DIGIT  : ["0"-"9"]>
 | <#NONZERO  : ["1"-"9"]>
 | <#LETTER : ["a"-"z","A"-"Z","_"]>
 | <#OCTALS: ["0"-"7"]>
 | <#ZERO : ["0"]>

}
void Program() : {}
{
<RESERVEDWORDPROCEDURE> <SSOpenBraces> (IfPart() | SwitchPart() | Expr()| Assignment() )* <SSCloseBraces>
{
System.out.println("Program Complete");
}

}


void IfPart() : {}
{
  <RESERVEDWORDIF> <SSOpenParen> (BooleanExpr()) <SSCloseParen> <SSOpenBraces> (Assignment())* <SSCloseBraces> (ElseIfPart())* (ElsePart())?
{
System.out.println("if part");
}
}

void ElseIfPart() : {}
{
  <RESERVEDWORDELSEIF> <SSOpenParen> (BooleanExpr()) <SSCloseParen><SSOpenBraces>  (Assignment())* <SSCloseBraces>
{
System.out.println("elseif part");
}
}

void ElsePart() : {}
{
  <RESERVEDWORDELSE> <SSOpenBraces>  (Assignment())* <SSCloseBraces>
{
System.out.println("else part");
}
}

void ComparisonOperator() : {}
{
  <SSAnd>|<SSOr>|<SSNot>|<ComparisonEquals>|<SSL>|<SSLE>|<SSG>|<SSGE>|<SSNE>
{
System.out.println("Found a boolean expression");
}
}
void BooleanExpr() : {}
{
  LOOKAHEAD(2)((<IDENTIFIER>|(Literal())) (ComparisonOperator()) (<IDENTIFIER>|(Literal()))) |<IDENTIFIER> |<RESERVEDWORDTRUE>|<RESERVEDWORDFALSE>
{
System.out.println("Found a boolean expression");
}
}

void Literal() : {}
{
  <INTEGER>|<REALNUMBER>|<REAL_NUMBER>|<STRING>
{
System.out.println("Found a boolean expression");
}
}


void SwitchPart() : {}
{
  <RESERVEDWORDSWITCH> <SSOpenParen> <IDENTIFIER><SSComma>(ComparisonOperator()) <SSCloseParen><SSOpenBraces>  (Cases())+ <SSCloseBraces>
{
System.out.println("Found a Switch statement");
}
}

void Cases() : {}
{
  <RESERVEDWORDCASE> (Literal()) <SSColon> <SSOpenBraces> (Assignment())* <SSCloseBraces>  
{
System.out.println(" Found a Case statement");
}
}
void Assignment() : {}
{
( LOOKAHEAD(2)StringAssignment()|(<RESERVEDWORDINT> |<RESERVEDWORDFLOAT>| <RESERVEDWORDDOUBLE>| <RESERVEDWORDBOOLEAN>| <RESERVEDWORDSTRING>) Assign() Factor() <SSSemiColon> )
{
System.out.println("Numeric Assignment");
}
}
void StringAssignment() : {}
{
(<RESERVEDWORDSTRING> Assign() <STRING> <SSSemiColon>)
{
System.out.println("String Assignment");
}

}
void Assign() : {}
{
<IDENTIFIER> <SSEquals>
}

void Expr() : {}
{
  <IDENTIFIER>(OperatorEqualsExpr()|IncrementExpr()|DecrementExpr())

}
void ArithmeticExpr(): {}
{
  <INTEGER>((<SSPlus>|<SSMinus>|<SSStar>|<SSDivide>) <INTEGER>)*
  {
  System.out.println("Arithmetic Expression");
  }
}
void Factor():{}
{
   (LOOKAHEAD(2)ArithmeticExpr()|<INTEGER>)
}
void IncrementExpr(): {}
{
   <SSplusplus><SSSemiColon>
   {
   System.out.println("Identifier ++");
   }
}
void DecrementExpr(): {}
{
   <SSminusminus><SSSemiColon>
   {
   System.out.println("Identifier --");
   }
}
void OperatorEqualsExpr():{}
{
   (LOOKAHEAD(2)PlusEqualsExpr()|LOOKAHEAD(2)MinusEqualsExpr()|LOOKAHEAD(2)MultEqualsExpr()|LOOKAHEAD(2)DivideEqualsExpr())
}
void PlusEqualsExpr(): {}
{
   <SSPlusEquals>(<IDENTIFIER>|<INTEGER>) <SSSemiColon>
   {
   System.out.println("Plus Equals Operation");
   }
}
void MinusEqualsExpr(): {}
{
   <SSMinusEquals>(<IDENTIFIER>|<INTEGER>) <SSSemiColon>
   {
   System.out.println("Minus Equals Operation");
   }
}
void MultEqualsExpr(): {}
{
   <SSMultEquals>(<IDENTIFIER>|<INTEGER>) <SSSemiColon>
   {
   System.out.println("Mult Equals Operation");
   }
}
void DivideEqualsExpr(): {}
{
   <SSDivideEquals>(<IDENTIFIER>|<INTEGER>) <SSSemiColon>
   {
   System.out.println("Divide Equals Operation");
   }
}
