options {
    OUTPUT_DIRECTORY="src";
}

PARSER_BEGIN(ExprParser)
import java.io.*;

public class ExprParser
{
    public static void main(String [] args) throws Exception
    {
        java.io.FileReader sr= new java.io.FileReader(args[0]);
        ExprParser parser = new ExprParser(sr);// Mark set

	System.out.println("Parsing has commenced");
        try {
            parser.Program();
        }
        catch (ParseException ex) {
            ex.printStackTrace();
        }
    }
}
PARSER_END(ExprParser)

SKIP : {
   <IGNORE : [" " , "\n"]> |
   <SINGLELINECOMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| < NEWLINE: ["\n", "\r"] > 
}
SKIP :
{
  "/*" : WithinComment

}
<WithinComment> SKIP :
{
  "*/" : DEFAULT
    
}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

<SPECIALSYMBOL: "~" | "!" | "@" | "%" | "^" | "&" | "*" |"-" | "+" | "|" | 
"/"| "?" | "<" | ">" | "." | "\'"  | "++" | "--" | "<<" | ">>" | "<=" | ">=" | "+=" | "-=" | "*=" | "/="  | "|=" | "%="|
"&=" | "^=" | "||" | "&&" | "!=" | "<<=" | ">>=" |"\""   >
{ debugStream.println("SPECIAL SYMBOL : " + matchedToken.image); }
|
<SSSemiColon: ";">
{ debugStream.println("SS SemiColon : " + matchedToken.image); }
|

<SSEquals: "=">
{ debugStream.println("SS Equals : " + matchedToken.image); }
|

<SSOpenParen : "(">
{ debugStream.println("SS Open Parenthesis : " + matchedToken.image); }
|
<SSCloseParen : ")">
{ debugStream.println("SS Close Parenthesis  : " + matchedToken.image); }
|
<SSOpenBraces : "{">
{ debugStream.println("SS Open Braces: " + matchedToken.image); }
|
<SSCloseBraces : "}">
{ debugStream.println("SS Close Braces  : " + matchedToken.image); }
|
<SSOpenBracket : "[">
{ debugStream.println("SS Open Bracket: " + matchedToken.image); }
|
<SSCloseBracket : "]">
{ debugStream.println("SS Close Bracket  : " + matchedToken.image); }
|
<ComparisonEquals : "==">
{ debugStream.println("ComparisonEquals : " + matchedToken.image); }
|
<SSComma : ",">
{ debugStream.println("Comma : " + matchedToken.image); }
|
<SSColon : ":">
{ debugStream.println("Colon : " + matchedToken.image); }
}

TOKEN : {
      <STRING:("\"")(<LETTER>|<DIGIT>|(<IGNORE>)*|<SPECIALSYMBOL> |<IGNORE> ("\""))*  >
{ debugStream.println("STRING token:" + matchedToken.image  ); }

    | <CHAR: ("\'" (<LETTER>|<DIGIT>|<SPECIALSYMBOL>){1} "\'")| ("\'\\\'")> 
{debugStream.println("CHAR token:" + matchedToken.image  );}
|
 <RESERVEDWORDPROCEDURE :"Procedure ::"> 
{ debugStream.println("RESERVEDWORD Prodcedure token:" + matchedToken.image  ); }

| <RESERVEDWORDIF :"if"> 
{ debugStream.println("RESERVEDWORD IF token:" + matchedToken.image  ); }

 |<RESERVEDWORDBOOLEAN :"boolean"> 
{ debugStream.println("RESERVEDWORD BOOLEAN token:" + matchedToken.image  ); }
 |<RESERVEDWORDDOUBLE :"double"> 
{ debugStream.println("RESERVEDWORD DOUBLE token:" + matchedToken.image  ); }

 |<RESERVEDWORDBREAK :"break"> 
{ debugStream.println("RESERVEDWORD BREAK token:" + matchedToken.image  ); }
 |<RESERVEDWORDELSE :"else"> 
{ debugStream.println("RESERVEDWORD ELSE token:" + matchedToken.image  ); }
 |<RESERVEDWORDELSEIF :"elseif"> 
{ debugStream.println("RESERVEDWORD ELSEIF token:" + matchedToken.image  ); }

 |<RESERVEDWORDBYTE :"byte"> 
{ debugStream.println("RESERVEDWORD BYTE token:" + matchedToken.image  ); }
 |<RESERVEDWORDRETURN :"return"> 
{ debugStream.println("RESERVEDWORD RETURN token:" + matchedToken.image  ); }

 |<RESERVEDWORDCASE :"case"> 
{ debugStream.println("RESERVEDWORD CASE token:" + matchedToken.image  ); }

 |<RESERVEDWORDINT :"int"> 
{ debugStream.println("RESERVEDWORD INT token:" + matchedToken.image  ); }

 |<RESERVEDWORDTRUE :"true"> 
{ debugStream.println("RESERVEDWORD TRUE token:" + matchedToken.image  ); }
 |<RESERVEDWORDFALSE :"false"> 
{ debugStream.println("RESERVEDWORD FALSE token:" + matchedToken.image  ); }
 |<RESERVEDWORDLONG :"long"> 
{ debugStream.println("RESERVEDWORD LONG token:" + matchedToken.image  ); }
 |<RESERVEDWORDSTRING :"string"> 
{ debugStream.println("RESERVEDWORD string token:" + matchedToken.image  ); }

 |<RESERVEDWORDSTRICTFP :"strictfp"> 
 |<RESERVEDWORDFLOAT :"float"> 
{ debugStream.println("RESERVEDWORD FLOAT token:" + matchedToken.image  ); }
 |<RESERVEDWORDSWITCH :"switch"> 
{ debugStream.println("RESERVEDWORD SWITCH token:" + matchedToken.image  ); }
 |<RESERVEDWORDWHILE :"while"> 
{ debugStream.println("RESERVEDWORD WHILE token:" + matchedToken.image  ); }
 |<RESERVEDWORDCONTINUE :"continue"> 
{ debugStream.println("RESERVEDWORD CONTINUE token:" + matchedToken.image  ); }
 |<RESERVEDWORDFOR :"for"> 
{ debugStream.println("RESERVEDWORD FOR token:" + matchedToken.image  ); }

 | <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> )*>
{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
|<INTEGER: <DECIMALINTEGER>|<OCTALINTEGER>|<HEXINTEGER>>
{debugStream.println("INTEGER token: " + matchedToken.image);}
 | <DECIMALINTEGER : <NONZERO> (<DIGIT> )*>
{ debugStream.println("DECIMAL INTEGER token: " + matchedToken.image); }
 | <OCTALINTEGER : <ZERO>(<OCTALS> )*>
{ debugStream.println("OCTAL INTEGER token: " + matchedToken.image); }
 | <HEXINTEGER : "0"("x"|"X")(<DIGIT>|<HEXLETTERS>)(<DIGIT>|<HEXLETTERS> )*>
{ debugStream.println("HEXADECIMAL INTEGER token: " + matchedToken.image); }
| <REALNUMBER : (<DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
{ debugStream.println("REALNUMBER: " + matchedToken.image); }
| <REAL_NUMBER : ("."(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
{ debugStream.println("REALNUMBER: " + matchedToken.image); }

 | <#HEXLETTERS:["A"-"F","a"-"f"]>
 | <#DIGIT  : ["0"-"9"]>
 | <#NONZERO  : ["1"-"9"]>
 | <#LETTER : ["a"-"z","A"-"Z","_"]>
 | <#OCTALS: ["0"-"7"]>
 | <#ZERO : ["0"]>

}
void Program() : {}
{
<RESERVEDWORDPROCEDURE> <SSOpenBraces> (IfPart() | SwitchPart() | Expr()| Assignment())* <SSCloseBraces>
{
System.out.println("Program Complete");
}

}
 

void IfPart() : {} 
{
  <RESERVEDWORDIF> <SSOpenParen> (BooleanExpr()) <SSCloseParen> <SSOpenBraces> (Expr()) <SSCloseBraces> (ElseIfPart())* (ElsePart())?
{
System.out.println("if part");
}
}

void ElseIfPart() : {} 
{
  <RESERVEDWORDELSEIF> <SSOpenParen> (BooleanExpr()) <SSCloseParen><SSOpenBraces>  (Expr()) <SSCloseBraces> 
{
System.out.println("elseif part");
}
}

void ElsePart() : {} 
{
  <RESERVEDWORDELSE> <SSOpenBraces>  (Expr()) <SSCloseBraces> 
{
System.out.println("else part");
}
}

void BooleanExpr() : {} 
{
  <IDENTIFIER> <ComparisonEquals> <IDENTIFIER>

}



void SwitchPart() : {} 
{
  <RESERVEDWORDSWITCH> <SSOpenParen> <IDENTIFIER><SSComma><SPECIALSYMBOL> <SSCloseParen><SSOpenBraces>  (Cases())+ <SSCloseBraces> 
{
System.out.println("Switch statement");
}
}

void Cases() : {} 
{
  <RESERVEDWORDCASE> <STRING> <SSColon>  <STRING> 
{
System.out.println("Casestatement");
}

}

void Assignment() : {}
{
StringAssignment() |( <RESERVEDWORDINT> |<RESERVEDWORDFLOAT>| <RESERVEDWORDDOUBLE>| <RESERVEDWORDBOOLEAN>| <RESERVEDWORDSTRING>) Assign() <INTEGER> <SSSemiColon> 
{
System.out.println("Numeric Assignment");
}
}
void StringAssignment() : {}
{
(<RESERVEDWORDSTRING> Assign() <STRING> <SSSemiColon>)
{
System.out.println("String Assignment");
}

}
void Assign() : {}
{
<IDENTIFIER> <SSEquals>
}

void Expr() : {} 
{
  <STRING>

}



