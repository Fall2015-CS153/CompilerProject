/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. calc.jj */
/*@egen*/options{
//other options
DEBUG_PARSER=true;
}
PARSER_BEGIN(ExprParser)
import java.io.*;

public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTExprParserState jjtree = new JJTExprParserState();

/*@egen*/
    public static void main(String [] args) throws Exception
    {

   java.io.FileReader sr= new java.io.FileReader(args[0]);
    ExprParser calc = new ExprParser(sr);

    try {
      SimpleNode node = calc.Program();
      node.dump(">");
    }



    catch (ParseException ex) {
      ex.printStackTrace();
    }


    }
}
PARSER_END(ExprParser)

SKIP : {
   <IGNORE : [" " , "\n"]> |
   <SINGLELINECOMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| < NEWLINE: ["\n", "\r"] >
}
SKIP :
{
  "/*" : WithinComment

}
<WithinComment> SKIP :
{
  "*/" : DEFAULT

}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

<SPECIALSYMBOL: "~"  | "@" | "%" | "^" |
 "?"  | "." | "\'"  | "<<" | ">>" | "|=" | "%="|
"&=" | "^="   | "<<=" | ">>=" |"\""   >
{ debugStream.println("SPECIAL SYMBOL : " + matchedToken.image); }
|
<SSAnd: "&">
{ debugStream.println("SS And : " + matchedToken.image); }
|
<SSOr: "|">
{ debugStream.println("SS Or : " + matchedToken.image); }
|
<SSNot: "!">
{ debugStream.println("SS Not : " + matchedToken.image); }
|
<SSL: "<">
{ debugStream.println("SS Less than : " + matchedToken.image); }
|
<SSLE: "<=">
{ debugStream.println("SS Less than equals : " + matchedToken.image); }
|
<SSG: ">">
{ debugStream.println("SS Greater than : " + matchedToken.image); }
|
<SSGE: ">=">
{ debugStream.println("SS Greater than equals : " + matchedToken.image); }
|
<SSNE: "!=">
{ debugStream.println("SSNE : " + matchedToken.image); }

|
<SSPlus: "+">
{ debugStream.println("SS Plus : " + matchedToken.image); }
|
<SSMinus: "-">
{ debugStream.println("SS Minus : " + matchedToken.image); }
|
<SSStar: "*">
{ debugStream.println("SS Star: " + matchedToken.image); }
|
<SSDivide: "/">
{ debugStream.println("SS Divide : " + matchedToken.image); }
|
<SSplusplus: "++">
{ debugStream.println("SS Plus_plus : " + matchedToken.image); }
|
<SSminusminus: "--">
{ debugStream.println("SS Minus_minus : " + matchedToken.image); }
|
<SSSemiColon: ";">
{ debugStream.println("SS SemiColon : " + matchedToken.image); }
|
<SSPlusEquals: "+=">
{ debugStream.println("SS Plus_equals : " + matchedToken.image); }
|
<SSMinusEquals: "-=">
{ debugStream.println("SS Minus_equals : " + matchedToken.image); }
|
<SSMultEquals: "*=">
{ debugStream.println("SS Mult_equals : " + matchedToken.image); }
|
<SSDivideEquals: "/=">
{ debugStream.println("SS Divide_equals : " + matchedToken.image); }
|
<SSEquals: "=">
{ debugStream.println("SS Equals : " + matchedToken.image); }
|

<SSOpenParen : "(">
{ debugStream.println("SS Open Parenthesis : " + matchedToken.image); }
|
<SSCloseParen : ")">
{ debugStream.println("SS Close Parenthesis  : " + matchedToken.image); }
|
<SSOpenBraces : "{">
{ debugStream.println("SS Open Braces: " + matchedToken.image); }
|
<SSCloseBraces : "}">
{ debugStream.println("SS Close Braces  : " + matchedToken.image); }
|
<SSOpenBracket : "[">
{ debugStream.println("SS Open Bracket: " + matchedToken.image); }
|
<SSCloseBracket : "]">
{ debugStream.println("SS Close Bracket  : " + matchedToken.image); }
|
<ComparisonEquals : "==">
{ debugStream.println("ComparisonEquals : " + matchedToken.image); }
|
<SSComma : ",">
{ debugStream.println("Comma : " + matchedToken.image); }
|
<SSColon : ":">
{ debugStream.println("Colon : " + matchedToken.image); }
}

TOKEN : {
 <RESERVEDWORDPROCEDURE :"Procedure ::">
{ debugStream.println("RESERVEDWORD Prodcedure token:" + matchedToken.image  ); }
| <RESERVEDWORDIF :"if">
{ debugStream.println("RESERVEDWORD IF token:" + matchedToken.image  ); }
 |<RESERVEDWORDBREAK :"break">
{ debugStream.println("RESERVEDWORD BREAK token:" + matchedToken.image  ); }
 |<RESERVEDWORDELSE :"else">
{ debugStream.println("RESERVEDWORD ELSE token:" + matchedToken.image  ); }
 |<RESERVEDWORDELSEIF :"elseif">
{ debugStream.println("RESERVEDWORD ELSEIF token:" + matchedToken.image  ); }
 |<RESERVEDWORDRETURN :"return">
{ debugStream.println("RESERVEDWORD RETURN token:" + matchedToken.image  ); }
 |<RESERVEDWORDCASE :"case">
{ debugStream.println("RESERVEDWORD CASE token:" + matchedToken.image  ); }
|<RESERVEDWORDSWITCH :"switch">
{ debugStream.println("RESERVEDWORD SWITCH token:" + matchedToken.image  ); }
|<RESERVEDWORDWHILE :"while">
{ debugStream.println("RESERVEDWORD WHILE token:" + matchedToken.image  ); }
 |<RESERVEDWORDFOR :"for">
{ debugStream.println("RESERVEDWORD FOR token:" + matchedToken.image  ); }

 |<RESERVEDWORDTRUE :"true">
{ debugStream.println("RESERVEDWORD TRUE token:" + matchedToken.image  ); }
 |<RESERVEDWORDFALSE :"false">
{ debugStream.println("RESERVEDWORD FALSE token:" + matchedToken.image  ); }
|<RESERVEDWORDINT :"int">
{ debugStream.println("RESERVEDWORD INTEGER token:" + matchedToken.image  ); }
 |<RESERVEDWORDFLOAT :"float">
{ debugStream.println("RESERVEDWORD FLOAT token:" + matchedToken.image  ); }
|<RESERVEDWORDBOOLEAN :"boolean">
{ debugStream.println("RESERVEDWORD BOOLEAN token:" + matchedToken.image  ); }
|<RESERVEDWORDDOUBLE :"double">
{ debugStream.println("RESERVEDWORD DOUBLE token:" + matchedToken.image  ); }
|<RESERVEDWORDSTRING :"string">
{ debugStream.println("RESERVEDWORD STRING token:" + matchedToken.image  ); }
|<RESERVEDWORDHASHMAP :"hashmap">
{ debugStream.println("RESERVEDWORD HASHMAP token:" + matchedToken.image  ); }
|<RESERVEDWORDSET :"set">
{ debugStream.println("RESERVEDWORD CASE Set:" + matchedToken.image  ); }
 |<RESERVEDWORDLIST :"list">
{ debugStream.println("RESERVEDWORD LIST token:" + matchedToken.image  ); }
 |<RESERVEDWORDNEW :"new">
{ debugStream.println("RESERVEDWORD NEW token:" + matchedToken.image  ); }

| <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> )*>
{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
|
<STRING:(<SINGLEQUOTE>|<DOUBLEQUOTE>)(<LETTER>|<DIGIT>|(<IGNORE>)*|<SPECIALSYMBOL> |<IGNORE> (<SINGLEQUOTE>|<DOUBLEQUOTE>))*  >
{ debugStream.println("STRING token:" + matchedToken.image  ); }
|<INTEGER: <DECIMALINTEGER>|<OCTALINTEGER>|<HEXINTEGER>>
{debugStream.println("INTEGER token: " + matchedToken.image);}
 | <DECIMALINTEGER : <NONZERO> (<DIGIT> )*>
{ debugStream.println("DECIMAL INTEGER token: " + matchedToken.image); }
 | <OCTALINTEGER : <ZERO>(<OCTALS> )*>
{ debugStream.println("OCTAL INTEGER token: " + matchedToken.image); }
 | <HEXINTEGER : "0"("x"|"X")(<DIGIT>|<HEXLETTERS>)(<DIGIT>|<HEXLETTERS> )*>
{ debugStream.println("HEXADECIMAL INTEGER token: " + matchedToken.image); }
| <REALNUMBER : (<DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
{ debugStream.println("REALNUMBER: " + matchedToken.image); }
| <REAL_NUMBER : ("."(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
{ debugStream.println("REALNUMBER: " + matchedToken.image); }

 | <#SINGLEQUOTE:["\'"]>
 | <#DOUBLEQUOTE:["\""]>
 | <#HEXLETTERS:["A"-"F","a"-"f"]>
 | <#DIGIT  : ["0"-"9"]>
 | <#NONZERO  : ["1"-"9"]>
 | <#LETTER : ["a"-"z","A"-"Z","_"]>
 | <#OCTALS: ["0"-"7"]>
 | <#ZERO : ["0"]>

}



SimpleNode Program() : {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
try {
/*@egen*/
<RESERVEDWORDPROCEDURE> <SSOpenBraces> (IfPart() | SwitchPart()|Statement()| DataTypes() )* <SSCloseBraces>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
return jjtn000;
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}
void PrimitiveType(): {/*@bgen(jjtree) PrimitiveType */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
  try {
/*@egen*/
  <RESERVEDWORDINT>|<RESERVEDWORDSTRING>|<RESERVEDWORDDOUBLE>|<RESERVEDWORDFLOAT>|<RESERVEDWORDBOOLEAN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void Expr(): {/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
   try {
/*@egen*/
   SimpleExpr() ( (<SSL>|<SSLE>|<SSG>|<SSGE>|<ComparisonEquals>) SimpleExpr() )*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
   


}
void SimpleExpr(): {/*@bgen(jjtree) SimpleExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleExpr */
  try {
/*@egen*/
  (<SSMinus>)? Term() ((<SSPlus>|<SSMinus>|<SSOr>) Term() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}
void Term (): {/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  Factor() ( (<SSStar>|<SSDivide>|<SSAnd>) Factor() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void Factor(): {/*@bgen(jjtree) Factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Factor */
    try {
/*@egen*/
    <IDENTIFIER>|(<INTEGER>|<REALNUMBER>|<REAL_NUMBER>)|<STRING>|(<SSNot>Factor())| (<SSOpenParen> Expr() <SSCloseParen>) |<RESERVEDWORDTRUE>|<RESERVEDWORDFALSE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
   

}
void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
   try {
/*@egen*/
   LOOKAHEAD(3)IncrementStatement()|LOOKAHEAD(3)DecrementStatement()|LOOKAHEAD(3)Assignment()|Declaration()|LOOKAHEAD(2)PlusEqualsStatement()|LOOKAHEAD(2)MinusEqualsStatement()|LOOKAHEAD(2)DivideEqualsStatement()|StarEqualsStatement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/


}
void IfPart() : {/*@bgen(jjtree) IfPart */
  SimpleNode jjtn000 = new SimpleNode(JJTIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfPart */
  try {
/*@egen*/
  <RESERVEDWORDIF> <SSOpenParen> (Expr()) <SSCloseParen> <SSOpenBraces> (Statement())* <SSCloseBraces> (ElseIfPart())* (ElsePart())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void ElseIfPart() : {/*@bgen(jjtree) ElseIfPart */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseIfPart */
 try {
/*@egen*/
 <RESERVEDWORDELSEIF> <SSOpenParen> (Expr()) <SSCloseParen><SSOpenBraces>  (Statement())* <SSCloseBraces>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/


}

void ElsePart() : {/*@bgen(jjtree) ElsePart */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElsePart */
 try {
/*@egen*/
 <RESERVEDWORDELSE> <SSOpenBraces>  (Statement())* <SSCloseBraces>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/


}




void Literal() : {/*@bgen(jjtree) Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	<INTEGER>|<REALNUMBER>|<REAL_NUMBER>|<STRING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	

}



void SwitchPart() : {/*@bgen(jjtree) SwitchPart */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchPart */
     try {
/*@egen*/
     <RESERVEDWORDSWITCH> <SSOpenParen> <IDENTIFIER><SSComma>(ComparisonOperator()) <SSCloseParen><SSOpenBraces>  (Cases())+ <SSCloseBraces>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
	

}
void ComparisonOperator() : {/*@bgen(jjtree) ComparisonOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
 try {
/*@egen*/
 <SSAnd>|<SSOr>|<SSNot>|<ComparisonEquals>|<SSL>|<SSLE>|<SSG>|<SSGE>|<SSNE>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/


}
void Cases() : {/*@bgen(jjtree) Cases */
  SimpleNode jjtn000 = new SimpleNode(JJTCASES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Cases */
        try {
/*@egen*/
	<RESERVEDWORDCASE> (Expr()) <SSColon> <SSOpenBraces> (LOOKAHEAD(3)Declaration()|Assignment())* <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	

}
void Assignment() : {/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
  (<IDENTIFIER><SSEquals> (Expr()) <SSSemiColon>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void Declaration(): {/*@bgen(jjtree) Declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
   try {
/*@egen*/
   PrimitiveType() (LOOKAHEAD(2)(Assignment()) |(<IDENTIFIER> (<SSComma> <IDENTIFIER>)*  <SSSemiColon> ) )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/


}


void IncrementStatement(): {/*@bgen(jjtree) IncrementStatement */
                            SimpleNode jjtn000 = new SimpleNode(JJTINCREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IncrementStatement */
   try {
/*@egen*/
   t = <IDENTIFIER><SSplusplus><SSSemiColon>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/

}
void DecrementStatement(): {/*@bgen(jjtree) DecrementStatement */
                            SimpleNode jjtn000 = new SimpleNode(JJTDECREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DecrementStatement */
   try {
/*@egen*/
   t = <IDENTIFIER><SSminusminus><SSSemiColon>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/

}
void PlusEqualsStatement(): {/*@bgen(jjtree) PlusEqualsStatement */
                             SimpleNode jjtn000 = new SimpleNode(JJTPLUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PlusEqualsStatement */
   try {
/*@egen*/
   t = <IDENTIFIER> <SSPlusEquals>(<IDENTIFIER>|<INTEGER>) <SSSemiColon>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void MinusEqualsStatement():{/*@bgen(jjtree) MinusEqualsStatement */
                             SimpleNode jjtn000 = new SimpleNode(JJTMINUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MinusEqualsStatement */
try {
/*@egen*/
t = <IDENTIFIER> <SSMinusEquals> (<IDENTIFIER>|<INTEGER>)<SSSemiColon>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void StarEqualsStatement(): {/*@bgen(jjtree) StarEqualsStatement */
                             SimpleNode jjtn000 = new SimpleNode(JJTSTAREQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StarEqualsStatement */
try {
/*@egen*/
t = <IDENTIFIER> <SSMultEquals> (<IDENTIFIER>|<INTEGER>)<SSSemiColon>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void DivideEqualsStatement(): {/*@bgen(jjtree) DivideEqualsStatement */
                               SimpleNode jjtn000 = new SimpleNode(JJTDIVIDEEQUALSSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DivideEqualsStatement */
try {
/*@egen*/
t = <IDENTIFIER> <SSDivideEquals>(<IDENTIFIER>|<INTEGER>)<SSSemiColon>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void DataTypes() : {/*@bgen(jjtree) DataTypes */
  SimpleNode jjtn000 = new SimpleNode(JJTDATATYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DataTypes */
try {
/*@egen*/
(Hashmap()| List() | Set())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/


}
void Hashmap (): {/*@bgen(jjtree) Hashmap */
                  SimpleNode jjtn000 = new SimpleNode(JJTHASHMAP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Hashmap */
 try {
/*@egen*/
 t = <RESERVEDWORDHASHMAP> <IDENTIFIER> (<SSOpenBracket> <INTEGER> <SSCloseBracket> <SSEquals> <INTEGER>| <SSEquals><RESERVEDWORDNEW>) <SSSemiColon>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void Set (): {/*@bgen(jjtree) Set */
              SimpleNode jjtn000 = new SimpleNode(JJTSET);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Set */
try {
/*@egen*/
t =  <RESERVEDWORDSET> <IDENTIFIER> (<SSOpenBracket> <INTEGER> <SSCloseBracket> <SSEquals> <INTEGER>|<SSEquals> <RESERVEDWORDNEW> <SSOpenBracket> <INTEGER> <SSCloseBracket>) <SSSemiColon>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void List (): {/*@bgen(jjtree) List */
               SimpleNode jjtn000 = new SimpleNode(JJTLIST);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) List */
try {
/*@egen*/
t =  <RESERVEDWORDLIST> <IDENTIFIER> (<SSOpenBracket> <INTEGER> <SSCloseBracket> <SSEquals> <INTEGER>|<SSEquals>  <RESERVEDWORDNEW> <SSOpenBracket> <INTEGER> <SSCloseBracket>) <SSSemiColon>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
