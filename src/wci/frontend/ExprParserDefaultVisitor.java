/* Generated By:JavaCC: Do not edit this line. ExprParserDefaultVisitor.java Version 6.0_1 */
package wci.frontend;

public class ExprParserDefaultVisitor implements ExprParserVisitor{
  public Object defaultVisit(SimpleNode node, Object data){
    node.childrenAccept(this, data);
    return data;
  }
  public Object visit(SimpleNode node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASThandleError node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTError node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTProgram node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTProcedureCall node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTProcedure node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTCommands node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTPrintStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTIntegerConst node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTRealConst node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStringConst node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTadd node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTsubtract node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTor node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTmultiply node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTdivide node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTand node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTIfPart node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTElseIfPart node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTElsePart node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTSwitchPart node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTComparisonOperator node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTCases node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTAssignment node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTvariable node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTvariableDecl node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDeclaration node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTFunction node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTIncrementStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDecrementStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTPlusEqualsStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTMinusEqualsStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTStarEqualsStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDivideEqualsStatement node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTFor node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDecVar node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTTestCond node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTWhileIncrementCond node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTIncrementCond node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTWhile node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDataStructAdd node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDataStructDelete node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDataStructGetVal node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDataStructGetIndex node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDataStructSetVal node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTDataTypes node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTHashmap node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTSet node, Object data){
    return defaultVisit(node, data);
  }
  public Object visit(ASTList node, Object data){
    return defaultVisit(node, data);
  }

    @Override
    public Object visit(ASTBooleanConst node, Object data) {
            return defaultVisit(node, data);

    }

    @Override
    public Object visit(ASTLessThan node, Object data) {
            return defaultVisit(node, data);

    }

    @Override
    public Object visit(ASTLessEquals node, Object data) {
            return defaultVisit(node, data);

    }

    @Override
    public Object visit(ASTGreaterThan node, Object data) {
            return defaultVisit(node, data);

    }

    @Override
    public Object visit(ASTGreaterEquals node, Object data) {
            return defaultVisit(node, data);

    }

    @Override
    public Object visit(ASTEquals node, Object data) {
            return defaultVisit(node, data);

    }
}
/* JavaCC - OriginalChecksum=84c00c879539bb2e8539208f74a96b75 (do not edit this line) */
