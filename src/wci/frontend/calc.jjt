options{
    NODE_EXTENDS="wci.intermediate.icodeimpl.ICodeNodeImpl";
    MULTI=true;
    VISITOR=true;
}
PARSER_BEGIN(ExprParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class ExprParser
{
    private static SymTabStack symTabStack;
    private static SymTabEntry programId;
    private static int index=0;

    public static void main(String[] args)
        throws Exception
    {
    	// Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

 // Parse a Pcl program.
        Reader    reader = new FileReader(args[0]);
        ExprParser parser = new ExprParser(reader);
	SimpleNode rootNode= parser.Program();
		   
	
        // Print the cross-reference table.
        CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        ExprParserVisitorAdapter typeVisitor = new ExprParserVisitorAdapter();
        rootNode.jjtAccept(typeVisitor, rootNode);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);
        
        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);

        // Create the compiler backend and generate code.
        Backend backend = BackendFactory.createBackend("compile");
        backend.process(iCode, symTabStack, "test.j");
	}


    }

PARSER_END(ExprParser)


SKIP : {
   <IGNORE : [" " , "\n"]> |
   <SINGLELINECOMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| < NEWLINE: ["\n", "\r"] >
}
SKIP :
{
  "/*" : WithinComment

}
<WithinComment> SKIP :
{
  "*/" : DEFAULT

}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

<SPECIALSYMBOL:  "@" | "%" | "^" |
 "?" | "\'"  | "<<" | ">>" | "|=" | "%="|
"&=" | "^="   | "<<=" | ">>=" |"\""   >

|<SSPeriod: ".">

|
<SSAnd: "&">

|
<SSOr: "|">

|
<SSNot: "!">

|
<SSL: "<">

|
<SSLE: "<=">

|
<SSG: ">">

|
<SSGE: ">=">

|
<SSNE: "!=">

|
<SSPlus: "+">

|
<SSMinus: "-">

|
<SSStar: "*">

|
<SSDivide: "/">

|
<SSplusplus: "++">

|
<SSminusminus: "--">

|
<SSSemiColon: ";">

|
<SSPlusEquals: "+=">

|
<SSMinusEquals: "-=">

|
<SSMultEquals: "*=">

|
<SSDivideEquals: "/=">

|
<SSEquals: "=">

|

<SSOpenParen : "(">

|
<SSCloseParen : ")">

|
<SSOpenBraces : "{">

|
<SSCloseBraces : "}">

|
<SSOpenBracket : "[">

|
<SSCloseBracket : "]">

|
<ComparisonEquals : "==">

|
<SSComma : ",">

|
<SSColon : ":">
|
<SSTilda : "~">
}

TOKEN : {
 <RESERVEDWORDPRINT :"put">
|
 <RESERVEDWORDPROCEDURE :"Procedure ::">
|
 <RESERVEDWORDCALL :"Call">
| <RESERVEDWORDIF :"if">

 |<RESERVEDWORDBREAK :"break">

 |<RESERVEDWORDELSE :"else">

 |<RESERVEDWORDELSEIF :"elseif">

 |<RESERVEDWORDRETURN :"return">

 |<RESERVEDWORDCASE :"case">

|<RESERVEDWORDSWITCH :"switch">

|<RESERVEDWORDWHILE :"while">

 |<RESERVEDWORDFOR :"for">

 |<RESERVEDWORDTRUE :"true">

 |<RESERVEDWORDFALSE :"false">

|<RESERVEDWORDINT :"int">

 |<RESERVEDWORDFLOAT :"float">

|<RESERVEDWORDBOOLEAN :"boolean">

|<RESERVEDWORDDOUBLE :"double">

|<RESERVEDWORDSTRING :"string">

|<RESERVEDWORDHASHMAP :"hashmap">

|<RESERVEDWORDSET :"set">

 |<RESERVEDWORDLIST :"list">

 |<RESERVEDWORDNEW :"new">
|<RESERVEDWORDPUBLIC :"public">
|<RESERVEDWORDVOID :"void">
|<DOTGETVAL: ".getVal">|
<DOTADD: ".add">|
<DOTREMOVE: ".remove">|
<DOTSETVAL: ".setVal">|
<DOTGETINDEX: ".getIndex">

| <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> )*>
|<STRING:(<SINGLEQUOTE>|<DOUBLEQUOTE>)(<LETTER>|<DIGIT>|(<IGNORE>)*|<SPECIALSYMBOL> |<IGNORE> (<SINGLEQUOTE>|<DOUBLEQUOTE>))*  >
|<INTEGER: <DECIMALINTEGER>|<OCTALINTEGER>|<HEXINTEGER>>
| <DECIMALINTEGER : <NONZERO> (<DIGIT> )*>
| <OCTALINTEGER : <ZERO>(<OCTALS> )*>
| <HEXINTEGER : "0"("x"|"X")(<DIGIT>|<HEXLETTERS>)(<DIGIT>|<HEXLETTERS> )*>
| <DOUBLE : <DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)*>
| <REALNUMBER : (<DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
| <REAL_NUMBER : ("."(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>


 | <#SINGLEQUOTE:["\'"]>
 | <#DOUBLEQUOTE:["\""]>
 | <#HEXLETTERS:["A"-"F","a"-"f"]>
 | <#DIGIT  : ["0"-"9"]>
 | <#NONZERO  : ["1"-"9"]>
 | <#LETTER : ["a"-"z","A"-"Z","_"]>
 | <#OCTALS: ["0"-"7"]>
 | <#ZERO : ["0"]>
 | <ERROR   : ~["\r", "\n"]>
}

JAVACODE
String handleError(Token token)
{
    System.out.println("*** ERROR: Line " + token.beginLine +
                       " after \"" + token.image + "\"");

    Token t;
  
    
        t = getNextToken();
   

    return t.image;
}

void Error() : {} 
{
<ERROR>       
}
       
SimpleNode Program() : {}
{
<IDENTIFIER> {
	programId = symTabStack.enterLocal(token.image);
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
//  deprecated      index=0;// Every procedure has new indx at 0

}<SSOpenBraces>
(Procedure())*
<SSCloseBraces>
{

return jjtThis;
}

}

void ProcedureCall() :{}
{
 <RESERVEDWORDCALL> <IDENTIFIER>{
jjtThis.setAttribute(VALUE,token.image);
}
 <SSOpenParen><SSCloseParen><SSSemiColon>
}

void Procedure() : {}
{
(<RESERVEDWORDPROCEDURE> <IDENTIFIER>{
jjtThis.setAttribute(VALUE, token.image);}
<SSOpenBraces> Commands()
)

}
void Commands() : {}
{
	(try {
	(IfPart() | SwitchPart()|Statement()| ProcedureCall()| DataTypes()|PrintStatement()|Error())* <SSCloseBraces>
	}catch (ParseException ex) {
        handleError(ex.currentToken);
	Commands();// Recursive call to continue error handling
    	})
}
void PrintStatement() : {}{
<RESERVEDWORDPRINT> Expr()(<SSComma> Expr())*<SSSemiColon>
}
//StringConst() | IntegerConst() |RealConst()
TypeSpec PrimitiveType() #void: {}
{
  <RESERVEDWORDINT> {return Predefined.integerType;}
  |<RESERVEDWORDSTRING>{return Predefined.stringType;}
  |<RESERVEDWORDDOUBLE>{return Predefined.doubleType;}
  |<RESERVEDWORDFLOAT>{return Predefined.floatType;}
  |<RESERVEDWORDBOOLEAN>{return Predefined.booleanType;}


}



void IntegerConst() : {}
{
	<INTEGER>
	{
        jjtThis.setTypeSpec(Predefined.integerType);
        jjtThis.setAttribute(VALUE, Integer.parseInt(token.image));
    }
}

void RealConst() : {}
{
    <REALNUMBER>|<REAL_NUMBER>|<DOUBLE>
    {
        jjtThis.setTypeSpec(Predefined.doubleType);
        jjtThis.setAttribute(VALUE, Double.parseDouble(token.image));
    }
}

void StringConst() : {}
{
	<STRING>
	{
        jjtThis.setTypeSpec(Predefined.stringType);
        jjtThis.setAttribute(VALUE, token.image.substring(1,token.image.length()-1));
    }
}


void Expr()#void: {}
{
   SimpleExpr() ( (<SSL>|<SSLE>|<SSG>|<SSGE>|<ComparisonEquals>) SimpleExpr() )*
}
void SimpleExpr() #void: {}
{
 Term() (<SSPlus>  Term() #add(2)|<SSMinus>  Term() #subtract(2)|<SSOr>  Term() #or(2))*

}

void Term () #void: {}
{
  Factor() ( <SSStar> Factor() #multiply(2)|<SSDivide> Factor() #divide(2)|<SSAnd> Factor() #and(2) )*
}

void Factor() #void: {}
{
    variable()
|(IntegerConst()|RealConst()|StringConst())
|(<SSNot>Factor())
|(<SSOpenParen> Expr() <SSCloseParen>) 
|<RESERVEDWORDTRUE>
|<RESERVEDWORDFALSE>
  
}

void Statement(): {}
{
   LOOKAHEAD(3)IncrementStatement()|LOOKAHEAD(3)DecrementStatement()|LOOKAHEAD(3)Assignment()|LOOKAHEAD(3) Declaration()|LOOKAHEAD(2)PlusEqualsStatement()|LOOKAHEAD(2)MinusEqualsStatement()|LOOKAHEAD(2)DivideEqualsStatement()|StarEqualsStatement()|For()|While()



}
void IfPart() : {}
{
  <RESERVEDWORDIF> <SSOpenParen> (Expr()) <SSCloseParen> <SSOpenBraces> (Statement())* <SSCloseBraces> (ElseIfPart())* (ElsePart())?


}

void ElseIfPart() : {}
{
 <RESERVEDWORDELSEIF> <SSOpenParen> (Expr()) <SSCloseParen><SSOpenBraces>  (Statement())* <SSCloseBraces>


}

void ElsePart() : {}
{
 <RESERVEDWORDELSE> <SSOpenBraces>  (Statement())* <SSCloseBraces>
}

void SwitchPart() : {}
{
     <RESERVEDWORDSWITCH> <SSOpenParen> (variable())<SSComma>(ComparisonOperator()) <SSCloseParen><SSOpenBraces>  (Cases())+ <SSCloseBraces>
}
void ComparisonOperator() : {}
{
	<SSAnd>|<SSOr>|<SSNot>|<ComparisonEquals>|<SSL>|<SSLE>|<SSG>|<SSGE>|<SSNE>
}
void Cases() : {}
{
	<RESERVEDWORDCASE> (Expr()) <SSColon> <SSOpenBraces> (LOOKAHEAD(3)Declaration()|Assignment())* <SSCloseBraces>
}
void Assignment() : {TypeSpec type;}
{
	type = variable() 
	<SSEquals> (Expr()) <SSSemiColon>
	{
		jjtThis.setTypeSpec(type);
	}
}

TypeSpec variable() : {}
{
    <IDENTIFIER> 
    {
        SymTabEntry variableId = symTabStack.lookup(token.image);
	    if(variableId==null)
	    {
	    	System.out.println("VARIABLE LOOKUP ERROR***");
            return null;
	    }
	    else 
	    {
	    	variableId.appendLineNumber(token.beginLine);
	    	TypeSpec type = variableId.getTypeSpec();
	    	jjtThis.setTypeSpec(type);
	    	jjtThis.setAttribute(ID, variableId);
	    	return type;
	    }
    }
}

void variableDecl(TypeSpec type) : {}
{
	<IDENTIFIER> 
	{
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.VARIABLE);
            jjtThis.setAttribute(ID, variableId);
            jjtThis.setTypeSpec(type);
            variableId.setTypeSpec(type);
    }
}

void Declaration(): {TypeSpec type;}
{
	type=PrimitiveType()
	variableDecl(type) 
   (LOOKAHEAD(2)((<SSEquals> (Expr()) <SSSemiColon>)) |( (<SSComma> <IDENTIFIER>)*  <SSSemiColon> ) )
   {
   	   jjtThis.setTypeSpec(type);
   }
}

void Function(): {}
{
	 <RESERVEDWORDPUBLIC> (DataTypes()|PrimitiveType()|<RESERVEDWORDVOID>) <SSOpenParen> ((DataTypes()|PrimitiveType()) variable() (<SSComma> ( (DataTypes()|PrimitiveType()) variable() ) )* )* <SSCloseParen><SSOpenBraces> (Statement())* <SSCloseBraces>
}
void IncrementStatement(): {TypeSpec type;}
{
	type =   variable()<SSplusplus><SSSemiColon>
	{
		jjtThis.setTypeSpec(type);
	}
}
void DecrementStatement(): {TypeSpec type;}
{
	type =   variable()<SSminusminus><SSSemiColon>
	{
		{
			jjtThis.setTypeSpec(type);
		}
	}
}
void PlusEqualsStatement(): {TypeSpec type;}
{
	type =    variable() <SSPlusEquals>(variable()|IntegerConst()) <SSSemiColon>
	{
		jjtThis.setTypeSpec(type);
	}
}

void MinusEqualsStatement():{TypeSpec type;}
{
	type = variable() <SSMinusEquals> (variable()|IntegerConst())<SSSemiColon>
	{
		jjtThis.setTypeSpec(type);
	}
}
void StarEqualsStatement(): {TypeSpec type;}
{
	type = variable() <SSMultEquals> (variable()|IntegerConst())<SSSemiColon>
	{
		jjtThis.setTypeSpec(type);
	}
}
void DivideEqualsStatement(): {TypeSpec type;}
{
	type = variable() <SSDivideEquals>(variable()|IntegerConst())<SSSemiColon>
	{
		jjtThis.setTypeSpec(type);
	}
}
void For(): {}
{
	<RESERVEDWORDFOR> <SSOpenParen>(DecVar()) TestCond()<SSSemiColon> IncrementCond()<SSCloseParen><SSOpenBraces> (Statement())* <SSCloseBraces>
}

void DecVar():{}
{
	Declaration()|Assignment()
}

void TestCond():{}
{
	Expr()
}

void WhileIncrementCond():{}
{
	<SSTilda>Statement()
}

void IncrementCond():{}
{
	Statement()
}

void While():{}
{
	<RESERVEDWORDWHILE> <SSOpenParen> TestCond() <SSCloseParen><SSOpenBraces> (Statement())* WhileIncrementCond() <SSCloseBraces>
}

void DataStructAdd():{}
{
	variable() <DOTADD> <SSOpenParen> (variable()|PrimitiveType()) (<SSComma>variable()|PrimitiveType())? <SSCloseParen> <SSSemiColon>
}


void DataStructDelete():{}
{
	variable() <DOTREMOVE> <SSOpenParen> (variable()|PrimitiveType()) <SSCloseParen> <SSSemiColon>
}

void DataStructGetVal():{}
{
	variable() <DOTGETVAL> <SSOpenParen> <INTEGER> <SSCloseParen> <SSSemiColon>
}

void DataStructGetIndex():{}
{
	variable() <DOTGETINDEX> <SSOpenParen> (variable()|PrimitiveType()) <SSCloseParen> <SSSemiColon>
}
void DataStructSetVal():{}
{
	variable() <DOTSETVAL> <SSOpenParen> (variable()|PrimitiveType()) <SSCloseParen> <SSSemiColon>
}


void DataTypes() : {}
{
	(Hashmap()| List() | Set())
}
void Hashmap (): {Token t;}
{
	t = <RESERVEDWORDHASHMAP> variable() (<SSOpenBracket> IntegerConst() <SSCloseBracket> <SSEquals> IntegerConst()| <SSEquals><RESERVEDWORDNEW>) <SSSemiColon>
}
void Set (): {Token t;}
{
	t =  <RESERVEDWORDSET> variable() (<SSOpenBracket> IntegerConst() <SSCloseBracket> <SSEquals> IntegerConst()|<SSEquals> <RESERVEDWORDNEW> <SSOpenBracket> IntegerConst() <SSCloseBracket>) <SSSemiColon>
}
void List (): {Token t;}
{
	t =  <RESERVEDWORDLIST> (variable()) (<SSOpenBracket> IntegerConst() <SSCloseBracket> <SSEquals> IntegerConst()|<SSEquals>  <RESERVEDWORDNEW> <SSOpenBracket> IntegerConst() <SSCloseBracket>) <SSSemiColon>
}

// Garbage Code???
JAVACODE
void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList) #void
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
}
