/* ExprParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParser.java */
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants, ExprParserConstants {/*@bgen(jjtree)*/
  protected static JJTExprParserState jjtree = new JJTExprParserState();private static SymTabStack symTabStack;
    private static SymTabEntry programId;
    private static int index=0;

    public static void main(String[] args)
        throws Exception
    {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

 // Parse a Pcl program.
        Reader    reader = new FileReader(args[0]);
        ExprParser parser = new ExprParser(reader);
        SimpleNode rootNode= parser.Program();


        // Print the cross-reference table.
        CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        ExprParserVisitorAdapter typeVisitor = new ExprParserVisitorAdapter();
        rootNode.jjtAccept(typeVisitor, rootNode);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);

        // Create the compiler backend and generate code.
        Backend backend = BackendFactory.createBackend("compile");
        backend.process(iCode, symTabStack, "test.j");
        }

  static String handleError(Token token) throws ParseException {/*@bgen(jjtree) handleError */
 ASThandleError jjtn000 = new ASThandleError(JJTHANDLEERROR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {System.out.println("*** ERROR: Line " + token.beginLine +
                       " after \u005c"" + token.image + "\u005c"");

    Token t;


        t = getNextToken();


    return t.image;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static final public void Error() throws ParseException {/*@bgen(jjtree) Error */
  ASTError jjtn000 = new ASTError(JJTERROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ERROR);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
programId = symTabStack.enterLocal(token.image);
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
//  deprecated      index=0;// Every procedure has new indx at 0

      jj_consume_token(SSOpenBraces);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDPROCEDURE:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Procedure();
      }
      jj_consume_token(SSCloseBraces);
jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ProcedureCall() throws ParseException {/*@bgen(jjtree) ProcedureCall */
  ASTProcedureCall jjtn000 = new ASTProcedureCall(JJTPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDCALL);
      jj_consume_token(IDENTIFIER);
jjtn000.setAttribute(VALUE,token.image);
      jj_consume_token(SSOpenParen);
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Procedure() throws ParseException {/*@bgen(jjtree) Procedure */
  ASTProcedure jjtn000 = new ASTProcedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDPROCEDURE);
      jj_consume_token(IDENTIFIER);
jjtn000.setAttribute(VALUE, token.image);
      jj_consume_token(SSOpenBraces);
      Commands();
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Commands() throws ParseException {/*@bgen(jjtree) Commands */
  ASTCommands jjtn000 = new ASTCommands(JJTCOMMANDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RESERVEDWORDCALL:
          case RESERVEDWORDIF:
          case RESERVEDWORDSWITCH:
          case RESERVEDWORDWHILE:
          case RESERVEDWORDFOR:
          case RESERVEDWORDINT:
          case RESERVEDWORDFLOAT:
          case RESERVEDWORDBOOLEAN:
          case RESERVEDWORDDOUBLE:
          case RESERVEDWORDSTRING:
          case RESERVEDWORDHASHMAP:
          case RESERVEDWORDSET:
          case RESERVEDWORDLIST:
          case IDENTIFIER:
          case ERROR:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RESERVEDWORDIF:{
            IfPart();
            break;
            }
          case RESERVEDWORDSWITCH:{
            SwitchPart();
            break;
            }
          case RESERVEDWORDWHILE:
          case RESERVEDWORDFOR:
          case RESERVEDWORDINT:
          case RESERVEDWORDFLOAT:
          case RESERVEDWORDBOOLEAN:
          case RESERVEDWORDDOUBLE:
          case RESERVEDWORDSTRING:
          case IDENTIFIER:{
            Statement();
            break;
            }
          case RESERVEDWORDCALL:{
            ProcedureCall();
            break;
            }
          case RESERVEDWORDHASHMAP:
          case RESERVEDWORDSET:
          case RESERVEDWORDLIST:{
            DataTypes();
            break;
            }
          case ERROR:{
            Error();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(SSCloseBraces);
      } catch (ParseException ex) {
handleError(ex.currentToken);
        Commands();// Recursive call to continue error handling

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public TypeSpec PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RESERVEDWORDINT:{
      jj_consume_token(RESERVEDWORDINT);
{if ("" != null) return Predefined.integerType;}
      break;
      }
    case RESERVEDWORDSTRING:{
      jj_consume_token(RESERVEDWORDSTRING);
{if ("" != null) return Predefined.stringType;}
      break;
      }
    case RESERVEDWORDDOUBLE:{
      jj_consume_token(RESERVEDWORDDOUBLE);
{if ("" != null) return Predefined.doubleType;}
      break;
      }
    case RESERVEDWORDFLOAT:{
      jj_consume_token(RESERVEDWORDFLOAT);
{if ("" != null) return Predefined.floatType;}
      break;
      }
    case RESERVEDWORDBOOLEAN:{
      jj_consume_token(RESERVEDWORDBOOLEAN);
{if ("" != null) return Predefined.booleanType;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void IntegerConst() throws ParseException {/*@bgen(jjtree) IntegerConst */
  ASTIntegerConst jjtn000 = new ASTIntegerConst(JJTINTEGERCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RealConst() throws ParseException {/*@bgen(jjtree) RealConst */
  ASTRealConst jjtn000 = new ASTRealConst(JJTREALCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REALNUMBER:{
        jj_consume_token(REALNUMBER);
        break;
        }
      case REAL_NUMBER:{
        jj_consume_token(REAL_NUMBER);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setTypeSpec(Predefined.doubleType);
        jjtn000.setAttribute(VALUE, Double.parseDouble(token.image));
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StringConst() throws ParseException {/*@bgen(jjtree) StringConst */
  ASTStringConst jjtn000 = new ASTStringConst(JJTSTRINGCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image.substring(1,token.image.length()-1));
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr() throws ParseException {
    SimpleExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSL:
      case SSLE:
      case SSG:
      case SSGE:
      case ComparisonEquals:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSL:{
        jj_consume_token(SSL);
        break;
        }
      case SSLE:{
        jj_consume_token(SSLE);
        break;
        }
      case SSG:{
        jj_consume_token(SSG);
        break;
        }
      case SSGE:{
        jj_consume_token(SSGE);
        break;
        }
      case ComparisonEquals:{
        jj_consume_token(ComparisonEquals);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SimpleExpr();
    }
  }

  static final public void SimpleExpr() throws ParseException {
    Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSOr:
      case SSPlus:
      case SSMinus:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSPlus:{
        jj_consume_token(SSPlus);
ASTadd jjtn001 = new ASTadd(JJTADD);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          Term();
        } catch (Throwable jjte001) {
if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
        }
      case SSMinus:{
        jj_consume_token(SSMinus);
ASTsubtract jjtn002 = new ASTsubtract(JJTSUBTRACT);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
        try {
          Term();
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                 jjtree.clearNodeScope(jjtn002);
                                                 jjtc002 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte002 instanceof RuntimeException) {
                                                 {if (true) throw (RuntimeException)jjte002;}
                                               }
                                               if (jjte002 instanceof ParseException) {
                                                 {if (true) throw (ParseException)jjte002;}
                                               }
                                               {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                               }
        }
        break;
        }
      case SSOr:{
        jj_consume_token(SSOr);
ASTor jjtn003 = new ASTor(JJTOR);
                                                                           boolean jjtc003 = true;
                                                                           jjtree.openNodeScope(jjtn003);
        try {
          Term();
        } catch (Throwable jjte003) {
if (jjtc003) {
                                                                             jjtree.clearNodeScope(jjtn003);
                                                                             jjtc003 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte003 instanceof RuntimeException) {
                                                                             {if (true) throw (RuntimeException)jjte003;}
                                                                           }
                                                                           if (jjte003 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte003;}
                                                                           }
                                                                           {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                                                                             jjtree.closeNodeScope(jjtn003,  2);
                                                                           }
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Term() throws ParseException {
    Factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSAnd:
      case SSStar:
      case SSDivide:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSStar:{
        jj_consume_token(SSStar);
ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
          Factor();
        } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
        }
        break;
        }
      case SSDivide:{
        jj_consume_token(SSDivide);
ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
        try {
          Factor();
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                           jjtree.clearNodeScope(jjtn002);
                                                           jjtc002 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte002 instanceof RuntimeException) {
                                                           {if (true) throw (RuntimeException)jjte002;}
                                                         }
                                                         if (jjte002 instanceof ParseException) {
                                                           {if (true) throw (ParseException)jjte002;}
                                                         }
                                                         {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
        }
        break;
        }
      case SSAnd:{
        jj_consume_token(SSAnd);
ASTand jjtn003 = new ASTand(JJTAND);
                                                                                     boolean jjtc003 = true;
                                                                                     jjtree.openNodeScope(jjtn003);
        try {
          Factor();
        } catch (Throwable jjte003) {
if (jjtc003) {
                                                                                       jjtree.clearNodeScope(jjtn003);
                                                                                       jjtc003 = false;
                                                                                     } else {
                                                                                       jjtree.popNode();
                                                                                     }
                                                                                     if (jjte003 instanceof RuntimeException) {
                                                                                       {if (true) throw (RuntimeException)jjte003;}
                                                                                     }
                                                                                     if (jjte003 instanceof ParseException) {
                                                                                       {if (true) throw (ParseException)jjte003;}
                                                                                     }
                                                                                     {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                                     }
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      variable();
      break;
      }
    case STRING:
    case INTEGER:
    case DOUBLE:
    case REALNUMBER:
    case REAL_NUMBER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        IntegerConst();
        break;
        }
      case DOUBLE:
      case REALNUMBER:
      case REAL_NUMBER:{
        RealConst();
        break;
        }
      case STRING:{
        StringConst();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case SSNot:{
      jj_consume_token(SSNot);
      Factor();
      break;
      }
    case SSOpenParen:{
      jj_consume_token(SSOpenParen);
      Expr();
      jj_consume_token(SSCloseParen);
      break;
      }
    case RESERVEDWORDTRUE:{
      jj_consume_token(RESERVEDWORDTRUE);
      break;
      }
    case RESERVEDWORDFALSE:{
      jj_consume_token(RESERVEDWORDFALSE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(3)) {
        IncrementStatement();
      } else if (jj_2_2(3)) {
        DecrementStatement();
      } else if (jj_2_3(3)) {
        Assignment();
      } else if (jj_2_4(3)) {
        Declaration();
      } else if (jj_2_5(2)) {
        PlusEqualsStatement();
      } else if (jj_2_6(2)) {
        MinusEqualsStatement();
      } else if (jj_2_7(2)) {
        DivideEqualsStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          StarEqualsStatement();
          break;
          }
        case RESERVEDWORDFOR:{
          For();
          break;
          }
        case RESERVEDWORDWHILE:{
          While();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void IfPart() throws ParseException {/*@bgen(jjtree) IfPart */
  ASTIfPart jjtn000 = new ASTIfPart(JJTIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDIF);
      jj_consume_token(SSOpenParen);
      Expr();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDWHILE:
        case RESERVEDWORDFOR:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(SSCloseBraces);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDELSEIF:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        ElseIfPart();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVEDWORDELSE:{
        ElsePart();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElseIfPart() throws ParseException {/*@bgen(jjtree) ElseIfPart */
  ASTElseIfPart jjtn000 = new ASTElseIfPart(JJTELSEIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDELSEIF);
      jj_consume_token(SSOpenParen);
      Expr();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDWHILE:
        case RESERVEDWORDFOR:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ElsePart() throws ParseException {/*@bgen(jjtree) ElsePart */
  ASTElsePart jjtn000 = new ASTElsePart(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDELSE);
      jj_consume_token(SSOpenBraces);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDWHILE:
        case RESERVEDWORDFOR:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void SwitchPart() throws ParseException {/*@bgen(jjtree) SwitchPart */
  ASTSwitchPart jjtn000 = new ASTSwitchPart(JJTSWITCHPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDSWITCH);
      jj_consume_token(SSOpenParen);
      variable();
      jj_consume_token(SSComma);
      ComparisonOperator();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_10:
      while (true) {
        Cases();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDCASE:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void ComparisonOperator() throws ParseException {/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSAnd:{
        jj_consume_token(SSAnd);
        break;
        }
      case SSOr:{
        jj_consume_token(SSOr);
        break;
        }
      case SSNot:{
        jj_consume_token(SSNot);
        break;
        }
      case ComparisonEquals:{
        jj_consume_token(ComparisonEquals);
        break;
        }
      case SSL:{
        jj_consume_token(SSL);
        break;
        }
      case SSLE:{
        jj_consume_token(SSLE);
        break;
        }
      case SSG:{
        jj_consume_token(SSG);
        break;
        }
      case SSGE:{
        jj_consume_token(SSGE);
        break;
        }
      case SSNE:{
        jj_consume_token(SSNE);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Cases() throws ParseException {/*@bgen(jjtree) Cases */
  ASTCases jjtn000 = new ASTCases(JJTCASES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDCASE);
      Expr();
      jj_consume_token(SSColon);
      jj_consume_token(SSOpenBraces);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        if (jj_2_8(3)) {
          Declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            Assignment();
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
                     ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSEquals);
      Expr();
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public TypeSpec variable() throws ParseException {/*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
SymTabEntry variableId = symTabStack.lookup(token.image);
            if(variableId==null)
            {
                System.out.println("VARIABLE LOOKUP ERROR***");
            {if ("" != null) return null;}
            }
            else
            {
                variableId.appendLineNumber(token.beginLine);
                TypeSpec type = variableId.getTypeSpec();
                jjtn000.setTypeSpec(type);
                jjtn000.setAttribute(ID, variableId);
                {if ("" != null) return type;}
            }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void variableDecl(TypeSpec type) throws ParseException {/*@bgen(jjtree) variableDecl */
  ASTvariableDecl jjtn000 = new ASTvariableDecl(JJTVARIABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.VARIABLE);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(type);
            variableId.setTypeSpec(type);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Declaration() throws ParseException {/*@bgen(jjtree) Declaration */
                     ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = PrimitiveType();
      variableDecl(type);
      if (jj_2_9(2)) {
        jj_consume_token(SSEquals);
        Expr();
        jj_consume_token(SSSemiColon);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SSSemiColon:
        case SSComma:{
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SSComma:{
              ;
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              break label_12;
            }
            jj_consume_token(SSComma);
            jj_consume_token(IDENTIFIER);
          }
          jj_consume_token(SSSemiColon);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Function() throws ParseException {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDPUBLIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVEDWORDHASHMAP:
      case RESERVEDWORDSET:
      case RESERVEDWORDLIST:{
        DataTypes();
        break;
        }
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        PrimitiveType();
        break;
        }
      case RESERVEDWORDVOID:{
        jj_consume_token(RESERVEDWORDVOID);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSOpenParen);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case RESERVEDWORDHASHMAP:
        case RESERVEDWORDSET:
        case RESERVEDWORDLIST:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDHASHMAP:
        case RESERVEDWORDSET:
        case RESERVEDWORDLIST:{
          DataTypes();
          break;
          }
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:{
          PrimitiveType();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        variable();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SSComma:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_14;
          }
          jj_consume_token(SSComma);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RESERVEDWORDHASHMAP:
          case RESERVEDWORDSET:
          case RESERVEDWORDLIST:{
            DataTypes();
            break;
            }
          case RESERVEDWORDINT:
          case RESERVEDWORDFLOAT:
          case RESERVEDWORDBOOLEAN:
          case RESERVEDWORDDOUBLE:
          case RESERVEDWORDSTRING:{
            PrimitiveType();
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          variable();
        }
      }
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDWHILE:
        case RESERVEDWORDFOR:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_15;
        }
        Statement();
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void IncrementStatement() throws ParseException {/*@bgen(jjtree) IncrementStatement */
                            ASTIncrementStatement jjtn000 = new ASTIncrementStatement(JJTINCREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSplusplus);
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DecrementStatement() throws ParseException {/*@bgen(jjtree) DecrementStatement */
                            ASTDecrementStatement jjtn000 = new ASTDecrementStatement(JJTDECREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSminusminus);
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{
                        jjtn000.setTypeSpec(type);
                }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PlusEqualsStatement() throws ParseException {/*@bgen(jjtree) PlusEqualsStatement */
                             ASTPlusEqualsStatement jjtn000 = new ASTPlusEqualsStatement(JJTPLUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSPlusEquals);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case INTEGER:{
        IntegerConst();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MinusEqualsStatement() throws ParseException {/*@bgen(jjtree) MinusEqualsStatement */
                             ASTMinusEqualsStatement jjtn000 = new ASTMinusEqualsStatement(JJTMINUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSMinusEquals);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case INTEGER:{
        IntegerConst();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StarEqualsStatement() throws ParseException {/*@bgen(jjtree) StarEqualsStatement */
                             ASTStarEqualsStatement jjtn000 = new ASTStarEqualsStatement(JJTSTAREQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSMultEquals);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case INTEGER:{
        IntegerConst();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DivideEqualsStatement() throws ParseException {/*@bgen(jjtree) DivideEqualsStatement */
                               ASTDivideEqualsStatement jjtn000 = new ASTDivideEqualsStatement(JJTDIVIDEEQUALSSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSDivideEquals);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case INTEGER:{
        IntegerConst();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void For() throws ParseException {/*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDFOR);
      jj_consume_token(SSOpenParen);
      DecVar();
      TestCond();
      jj_consume_token(SSSemiColon);
      IncrementCond();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDWHILE:
        case RESERVEDWORDFOR:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_16;
        }
        Statement();
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DecVar() throws ParseException {/*@bgen(jjtree) DecVar */
  ASTDecVar jjtn000 = new ASTDecVar(JJTDECVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        Declaration();
        break;
        }
      case IDENTIFIER:{
        Assignment();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TestCond() throws ParseException {/*@bgen(jjtree) TestCond */
  ASTTestCond jjtn000 = new ASTTestCond(JJTTESTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileIncrementCond() throws ParseException {/*@bgen(jjtree) WhileIncrementCond */
  ASTWhileIncrementCond jjtn000 = new ASTWhileIncrementCond(JJTWHILEINCREMENTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SSTilda);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IncrementCond() throws ParseException {/*@bgen(jjtree) IncrementCond */
  ASTIncrementCond jjtn000 = new ASTIncrementCond(JJTINCREMENTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDWHILE);
      jj_consume_token(SSOpenParen);
      TestCond();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVEDWORDWHILE:
        case RESERVEDWORDFOR:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        Statement();
      }
      WhileIncrementCond();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataStructAdd() throws ParseException {/*@bgen(jjtree) DataStructAdd */
  ASTDataStructAdd jjtn000 = new ASTDataStructAdd(JJTDATASTRUCTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(DOTADD);
      jj_consume_token(SSOpenParen);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        PrimitiveType();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSComma:
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SSComma:{
          jj_consume_token(SSComma);
          variable();
          break;
          }
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:{
          PrimitiveType();
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataStructDelete() throws ParseException {/*@bgen(jjtree) DataStructDelete */
  ASTDataStructDelete jjtn000 = new ASTDataStructDelete(JJTDATASTRUCTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(DOTREMOVE);
      jj_consume_token(SSOpenParen);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        PrimitiveType();
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataStructGetVal() throws ParseException {/*@bgen(jjtree) DataStructGetVal */
  ASTDataStructGetVal jjtn000 = new ASTDataStructGetVal(JJTDATASTRUCTGETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(DOTGETVAL);
      jj_consume_token(SSOpenParen);
      jj_consume_token(INTEGER);
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataStructGetIndex() throws ParseException {/*@bgen(jjtree) DataStructGetIndex */
  ASTDataStructGetIndex jjtn000 = new ASTDataStructGetIndex(JJTDATASTRUCTGETINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(DOTGETINDEX);
      jj_consume_token(SSOpenParen);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        PrimitiveType();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataStructSetVal() throws ParseException {/*@bgen(jjtree) DataStructSetVal */
  ASTDataStructSetVal jjtn000 = new ASTDataStructSetVal(JJTDATASTRUCTSETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(DOTSETVAL);
      jj_consume_token(SSOpenParen);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variable();
        break;
        }
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:{
        PrimitiveType();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataTypes() throws ParseException {/*@bgen(jjtree) DataTypes */
  ASTDataTypes jjtn000 = new ASTDataTypes(JJTDATATYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVEDWORDHASHMAP:{
        Hashmap();
        break;
        }
      case RESERVEDWORDLIST:{
        List();
        break;
        }
      case RESERVEDWORDSET:{
        Set();
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Hashmap() throws ParseException {/*@bgen(jjtree) Hashmap */
                  ASTHashmap jjtn000 = new ASTHashmap(JJTHASHMAP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RESERVEDWORDHASHMAP);
      variable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSOpenBracket:{
        jj_consume_token(SSOpenBracket);
        IntegerConst();
        jj_consume_token(SSCloseBracket);
        jj_consume_token(SSEquals);
        IntegerConst();
        break;
        }
      case SSEquals:{
        jj_consume_token(SSEquals);
        jj_consume_token(RESERVEDWORDNEW);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Set() throws ParseException {/*@bgen(jjtree) Set */
              ASTSet jjtn000 = new ASTSet(JJTSET);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RESERVEDWORDSET);
      variable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSOpenBracket:{
        jj_consume_token(SSOpenBracket);
        IntegerConst();
        jj_consume_token(SSCloseBracket);
        jj_consume_token(SSEquals);
        IntegerConst();
        break;
        }
      case SSEquals:{
        jj_consume_token(SSEquals);
        jj_consume_token(RESERVEDWORDNEW);
        jj_consume_token(SSOpenBracket);
        IntegerConst();
        jj_consume_token(SSCloseBracket);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void List() throws ParseException {/*@bgen(jjtree) List */
               ASTList jjtn000 = new ASTList(JJTLIST);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RESERVEDWORDLIST);
      variable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SSOpenBracket:{
        jj_consume_token(SSOpenBracket);
        IntegerConst();
        jj_consume_token(SSCloseBracket);
        jj_consume_token(SSEquals);
        IntegerConst();
        break;
        }
      case SSEquals:{
        jj_consume_token(SSEquals);
        jj_consume_token(RESERVEDWORDNEW);
        jj_consume_token(SSOpenBracket);
        IntegerConst();
        jj_consume_token(SSCloseBracket);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList) throws ParseException {SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SSDivideEquals)) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_scan_token(SSComma)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SSEquals)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SSSemiColon)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(RESERVEDWORDBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(RESERVEDWORDFLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(RESERVEDWORDDOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SSMinusEquals)) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_scan_token(RESERVEDWORDSTRING)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_scan_token(RESERVEDWORDINT)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SSPlusEquals)) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SSminusminus)) return true;
    if (jj_scan_token(SSSemiColon)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_26()) return true;
    if (jj_scan_token(SSplusplus)) return true;
    if (jj_scan_token(SSSemiColon)) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(SSEquals)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(SSNot)) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ExprParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0xf000,0xf000,0x60400,0x60400,0x180200,0x180200,0x0,0x20000800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fe00,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0xff38300,0xff38300,0x1f00000,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0xc0000,0x30000,0x1f30000,0x1000,0x800,0x1f30000,0x1f30000,0x4000,0x8,0x1f00000,0x0,0x10,0x10,0x4ff00000,0xff00000,0xff00000,0x10,0xff00000,0x1f30000,0x0,0x0,0x0,0x0,0x1f30000,0x1f00000,0x1f30000,0x1f00000,0x1f00010,0x1f00010,0x1f00000,0x1f00000,0x1f00000,0xe000000,0x2,0x2,0x2,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x200010,0x200010,0x0,0x1c00,0x0,0x0,0x0,0x0,0x0,0x0,0x1c60,0x1c70,0x10,0x10,0x0,0x0,0x10,0x10,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x50,0x50,0x50,0x50,0x10,0x10,0x10,0x10,0x0,0x0,0x10,0x10,0x10,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExprParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExprParser(ExprParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[86];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
