run:
Parsing has commenced
RESERVEDWORD Prodcedure token:Procedure ::
SS Open Braces: {
RESERVEDWORD IF token:if
SS Open Parenthesis : (
IDENTIFIER token: dog
ComparisonEquals : ==
IDENTIFIER token: cat
SS Close Parenthesis  : )
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: f
SS Equals : =
INTEGER token: 9
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: g
SS Equals : =
INTEGER token: 10
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
SS Close Braces  : }
RESERVEDWORD ELSEIF token:elseif
SS Open Parenthesis : (
IDENTIFIER token: dog
SS Less than equals : <=
IDENTIFIER token: cat
SS Close Parenthesis  : )
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: f
SS Equals : =
INTEGER token: 100
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: g
SS Equals : =
INTEGER token: 99
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
SS Close Braces  : }
elseif part
RESERVEDWORD ELSE token:else
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: fg
SS Equals : =
INTEGER token: 91
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
SS Close Braces  : }
else part
if part
RESERVEDWORD SWITCH token:switch
SS Open Parenthesis : (
IDENTIFIER token: word
Comma : ,
SS Not equal to : !=
Found a boolean expression
SS Close Parenthesis  : )
SS Open Braces: {
RESERVEDWORD CASE token:case
STRING token:"hello1"
Found a boolean expression
Colon : :
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: a
SS Equals : =
INTEGER token: 4
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
IDENTIFIER token: a
SS Equals : =
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Found a Identifier and Operation
SS Close Braces  : }
 Found a Case statement
RESERVEDWORD CASE token:case
STRING token:"hello2"
Found a boolean expression
Colon : :
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: b
SS Equals : =
INTEGER token: 3
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
SS Close Braces  : }
 Found a Case statement
SS Close Braces  : }
Found a Switch statement
RESERVEDWORD SWITCH token:switch
SS Open Parenthesis : (
IDENTIFIER token: dog
Comma : ,
SS Less than equals : <=
SS Close Parenthesis  : )
SS Open Braces: {
RESERVEDWORD CASE token:case
INTEGER token: 2
Colon : :
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: a
SS Equals : =
INTEGER token: 4
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
IDENTIFIER token: a
SS Equals : =
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Found a Identifier and Operation
SS Close Braces  : }
 Found a Case statement
RESERVEDWORD CASE token:case
INTEGER token: 3
Colon : :
SS Open Braces: {
RESERVEDWORD INTEGER token:int
IDENTIFIER token: b
SS Equals : =
INTEGER token: 3
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
SS Close Braces  : }
 Found a Case statement
SS Close Braces  : }
Found a Switch statement
RESERVEDWORD INTEGER token:int
IDENTIFIER token: a
SS Equals : =
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
IDENTIFIER token: a
SS Equals : =
INTEGER token: 7
SS SemiColon : ;
Arithmetic Expression
Found a Identifier and Operation
RESERVEDWORD FLOAT token:float
IDENTIFIER token: b
SS Equals : =
REALNUMBER: 5.0235645
SS SemiColon : ;
Numeric Assignment
RESERVEDWORD DOUBLE token:double
IDENTIFIER token: c
SS Equals : =
REALNUMBER: 5.24
SS SemiColon : ;
Numeric Assignment
IDENTIFIER token: c
SS Equals : =
REALNUMBER: 6.3
SS SemiColon : ;
Found a Identifier and Operation
RESERVEDWORD BOOLEAN token:boolean
IDENTIFIER token: d
SS Equals : =
RESERVEDWORD TRUE token:true
SS SemiColon : ;
Numeric Assignment
RESERVEDWORD STRING token:string
IDENTIFIER token: e
SS Equals : =
STRING token:'word'
SS SemiColon : ;
String Assignment
Numeric Assignment
IDENTIFIER token: e
SS Equals : =
STRING token:"newword"
SS SemiColon : ;
Found a Identifier and Operation
RESERVEDWORD STRING token:string
IDENTIFIER token: e
SS Equals : =
STRING token:'abc'
SS SemiColon : ;
String Assignment
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: add
SS Equals : =
INTEGER token: 5
SS Plus : +
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: subtract
SS Equals : =
INTEGER token: 5
SS Minus : -
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: mult
SS Equals : =
INTEGER token: 5
SS Star: *
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: divide
SS Equals : =
INTEGER token: 5
SS Divide : /
INTEGER token: 5
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
RESERVEDWORD INTEGER token:int
IDENTIFIER token: multops
SS Equals : =
INTEGER token: 5
SS Plus : +
INTEGER token: 6
SS Star: *
INTEGER token: 3
SS Divide : /
INTEGER token: 4
SS SemiColon : ;
Arithmetic Expression
Numeric Assignment
IDENTIFIER token: a
SS Plus_plus : ++
SS SemiColon : ;
Identifier ++
Found a Identifier and Operation
IDENTIFIER token: a
SS Minus_minus : --
SS SemiColon : ;
Identifier --
Found a Identifier and Operation
IDENTIFIER token: a
SS Plus_equals : +=
INTEGER token: 5
SS SemiColon : ;
Plus Equals Operation
Found a Identifier and Operation
IDENTIFIER token: a
SS Minus_equals : -=
INTEGER token: 5
SS SemiColon : ;
Minus Equals Operation
Found a Identifier and Operation
IDENTIFIER token: a
SS Mult_equals : *=
INTEGER token: 5
SS SemiColon : ;
Mult Equals Operation
Found a Identifier and Operation
IDENTIFIER token: a
SS Divide_equals : /=
INTEGER token: 5
SS SemiColon : ;
Divide Equals Operation
Found a Identifier and Operation
SS Close Braces  : }
Program Complete
BUILD SUCCESSFUL (total time: 0 seconds)
